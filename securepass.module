<?php

use Securepass\Securepass;
use Securepass\Exception\Exception as SecurepassException;

include_once 'securepass.client.inc';

/**
 * Implements hook_permission().
 */
function securepass_permission() {
  return array(
    'administer securepass' =>  array(
      'title' => t('Administer securepass'),
      'description' => t('Administer Securepass configurations.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function securepass_menu() {
  $items = array();

  $items['admin/config/system/securepass'] = array(
    'title' => 'Securepass',
    'description' => 'Configure required settings for Securepass integration.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('securepass_api_keys_settings'),
    'access arguments' => array('administer securepass'),
    'file' => 'securepass.admin.inc',
  );

  $items['admin/config/system/securepass/api-keys'] = array(
    'title' => 'Api Keys',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'securepass.admin.inc',
  );

  $items['admin/config/system/securepass/autentication'] = array(
    'title' => 'Autentication',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('securepass_authentication_settings'),
    'access arguments' => array('administer securepass'),
    'file' => 'securepass.admin.inc',
  );

  return $items;
}

/**
 * Implement hook_form_alter() to change the behaviour of the login form.
 *
 * Login validators are set in the user_login_default_validators() function in user.module.
 * They are normally set to array('user_login_name_validate',
 * 'user_login_authenticate_validate', 'user_login_final_validate').
 * We simply replace 'user_login_authenticate_validate' with 'extauth_login_validate'.
*/
function securepass_form_user_login_alter(&$form, $form_state ) {
  if (variable_get('securepass_authentication', false)) {
    unset($form['links']);
    $form['#validate'] = array('user_login_name_validate', 'securepass_login_validate', 'user_login_final_validate');
  }
}

function securepass_form_user_login_block_alter(&$form, $form_state ) {
    return securepass_form_user_login_alter($form, $form_state );
}

/**
* The securepass_login_validate() function attempts to authenticate a user off the external system
* using their e-mail address.
*/
function securepass_login_validate($form, &$form_state) {
    global $user;
    $username = $form_state['values']['name'];
    $password = $form_state['values']['pass'];
    try {
      // first check if api status is ok.
      securepass_api_check_status();

      // now go ahed with autentication
      $client = securepass_client();
      $config = array(
        'username' => $username,
        'secret'   => $password,
      );
      $res = $client->user('auth', $config);
      if ($res['authenticated']) {
        user_external_login_register($username, 'securepass');
        $form_state['uid'] = $user->uid;
      }
    }
    catch (SecurepassException $e) {
      drupal_set_message('Securepass API error: ' . t($e->getMessage()), 'error');
    }
}

/**
 * Implements of hook_insert()
 */
function securepass_user_insert(&$edit, &$account, $category = null) {
  if (variable_get('securepass_authentication', false)) {
    if (empty($account->mail)) {
      try {
        $client = securepass_client();
        $info = $client->user('info', array('username' => $account->name));
        if (valid_email_address($info['email'])) {
          db_update('users')->fields(array('mail' => $info['email']))
                            ->condition('uid', $account->uid, '=')
                            ->execute();
        }
      }
      catch (SecurepassException $e) {
        drupal_set_message('Securepass API error: ' . t($e->getMessage()), 'error');
        user_delete($account->uid);
      }
    }
  }
}



/**
 * Implements hook_help().
 */
function securepass_help($path, $arg) {
  switch ($path) {
    // Main module help for the block module
    /*
     *case 'admin/help#block':
     *  return '<p>' . t('Blocks are boxes of content rendered into an area, or region, of a web page. The default theme Bartik, for example, implements the regions "Sidebar first", "Sidebar second", "Featured", "Content", "Header", "Footer", etc., and a block may appear in any one of these areas. The <a href="@blocks">blocks administration page</a> provides a drag-and-drop interface for assigning a block to a region, and for controlling the order of blocks within regions.', array('@blocks' => url('admin/structure/block'))) . '</p>';

    case '':
      return '<p>' . t('', array('' => )) . '</p>';
      */
  }
}


/**
 * Implements hook_requirements().
 */
function securepass_requirements($phase) {
  $requirements = array();

  /*
   *  // Ensure translations don't break at install time
   *  $t = get_t();
   *
   *  // Report Drupal version
   *  if ($phase == 'runtime') {
   *    $requirements['drupal'] = array(
   *      'title' => $t('Drupal'),
   *      'value' => VERSION,
   *      'severity' => REQUIREMENT_INFO
   *    );
   *  }
   *
   *  // Test PHP version
   *  $requirements['php'] = array(
   *    'title' => $t('PHP'),
   *    'value' => ($phase == 'runtime') ? l(phpversion(), 'admin/logs/status/php') : phpversion(),
   *  );
   *  if (version_compare(phpversion(), DRUPAL_MINIMUM_PHP) < 0) {
   *    $requirements['php']['description'] = $t('Your PHP installation is too old. Drupal requires at least PHP %version.', array('%version' => DRUPAL_MINIMUM_PHP));
   *    $requirements['php']['severity'] = REQUIREMENT_ERROR;
   *  }
   *
   *  // Report cron status
   *  if ($phase == 'runtime') {
   *    $cron_last = variable_get('cron_last');
   *
   *    if (is_numeric($cron_last)) {
   *      $requirements['cron']['value'] = $t('Last run !time ago', array('!time' => format_interval(REQUEST_TIME - $cron_last)));
   *    }
   *    else {
   *      $requirements['cron'] = array(
   *        'description' => $t('Cron has not run. It appears cron jobs have not been setup on your system. Check the help pages for <a href="@url">configuring cron jobs</a>.', array('@url' => 'http://drupal.org/cron')),
   *        'severity' => REQUIREMENT_ERROR,
   *        'value' => $t('Never run'),
   *      );
   *    }
   *
   *    $requirements['cron']['description'] .= ' ' . t('You can <a href="@cron">run cron manually</a>.', array('@cron' => url('admin/logs/status/run-cron')));
   *
   *    $requirements['cron']['title'] = $t('Cron maintenance tasks');
   *  }
   */
  /* Your code here */
  return $requirements;
}
